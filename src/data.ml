type file = { name: string; text: string }
let files = [{ name = "elpi-checker.elpi"; text = "" }; { name = "elpi_quoted_syntax.elpi"; text = "LyogZWxwaTogZW1iZWRkZWQgbGFtYmRhIHByb2xvZyBpbnRlcnByZXRlciAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqLwovKiBsaWNlbnNlOiBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgVmVyc2lvbiAyLjEgb3IgbGF0ZXIgICAgICAgICAgICovCi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi8KCiUgSE9BUyBmb3IgZWxwaSBwcm9ncmFtcwoKa2luZCB0ZXJtIHR5cGUuCgp0eXBlIGFwcCBsaXN0IHRlcm0gLT4gdGVybS4KdHlwZSBsYW0gKHRlcm0gLT4gdGVybSkgLT4gdGVybS4KdHlwZSBjb25zdCBzdHJpbmcgLT4gdGVybS4KCnR5cGUgY2RhdGEgY3R5cGUgImNkYXRhIiAtPiB0ZXJtLiAlIGludCwgc3RyaW5nLCBmbG9hdC4uIHNlZSBhbHNvICRpc19jZGF0YQoKdHlwZSBhcmcgKHRlcm0gLT4gdGVybSkgLT4gdGVybS4gICUgb25seSB0byBiaW5kIHRoZSBhcmdzIG9mIGEgY2xhdXNlCgpraW5kIGNsYXVzZSB0eXBlLgp0eXBlIGNsYXVzZSAoY3R5cGUgImxvYyIpIC0+IGxpc3Qgc3RyaW5nIC0+IHRlcm0gLT4gY2xhdXNlLgoKJSBhIHByb2dyYW0gaXMgdGhlbiBhIGxpc3Qgb2YgY2xhdXNlIHdoaWxlCiUgdGhlIHF1ZXJ5IGlzIGp1c3Qgb25lIGl0ZW0gb2YgdGhlIHNhbWUga2luZC4KCiUgc2VlIGVscGktY2hlY2tlci5lbHBpIGZvciBhbiBleGFtcGxlCgolIHZpbTogc2V0IGZ0PWxwcm9sb2c6Cgo=" }]
 let load () = List.iter (fun f -> Sys_js.create_file f.name (B64.decode f.text)) files
