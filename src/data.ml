type file = { name: string; text: string }
let files = [{ name = "elpi-checker.elpi"; text = "LyogZWxwaTogZW1iZWRkZWQgbGFtYmRhIHByb2xvZyBpbnRlcnByZXRlciAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqLwovKiBsaWNlbnNlOiBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgVmVyc2lvbiAyLjEgb3IgbGF0ZXIgICAgICAgICAgICovCi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi8KCiUgU2ltcGxlIHR5cGUgY2hlY2tlciBmb3IgbGFtYmRhLVByb2xvZyBwcm9ncmFtcwphY2N1bXVsYXRlIGVscGlfcXVvdGVkX3N5bnRheC4KCiUgLS0tLS0tLS0tIEhPQVMgb3IgcHJvZ3JhbXMgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKa2luZCB0eXAgdHlwZS4gJSUlJSUgdHlwZXMgJSUlJSUlCgp0eXBlIGFycm93IHR5cCAtPiB0eXAgLT4gdHlwLgp0eXBlIHRjb25zdCBzdHJpbmcgLT4gdHlwLgp0eXBlIHRhcHAgbGlzdCB0eXAgLT4gdHlwLgp0eXBlIHByb3AgdHlwLgp0eXBlIGZvcmFsbCAodHlwIC0+IHR5cCkgLT4gdHlwLiAlIHBvbHltb3JwaGljIHR5cGUgZGVjbGFyYXRpb25zCnR5cGUgY3R5cGUgc3RyaW5nIC0+IHR5cC4KCiUgLS0tLS0tLS0tIHV0aWxzICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCmlmIEIgVCBfIDotIEIsICEsIFQuCmlmIF8gXyBFIDotIEUuCgppdGVyIF8gW10uCml0ZXIgRiBbWCB8IFhTXSA6LSBGIFgsIGl0ZXIgRiBYUy4KCiUgLS0tLS0tLS0tIGVycm9yIHJlcG9ydGluZyAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCmtpbmQgZXJyIHR5cGUuCnR5cGUgdHlwZS1lcnIgdGVybSAtPiB0eXAgLT4gdHlwIC0+IGVyci4KdHlwZSB3cm9uZy1hcml0eSB0ZXJtIC0+IHR5cCAtPiBsaXN0IHRlcm0gLT4gZXJyLgp0eXBlIHVua25vd24gdGVybSAtPiBlcnIuCnR5cGUgYXNzZXJ0IHByb3AgLT4gZXJyIC0+IHByb3AuCgp0eXBlIGVycm9yIGxpc3Qgc3RyaW5nIC0+IHByb3AuCjpuYW1lICJkZWZhdWx0LXR5cGVjaGVja2luZy1lcnJvciIKZXJyb3IgTXNnIDotIGl0ZXIgKHhcIHByaW50IHgpIE1zZy4KCnR5cGUgd2FybmluZyBzdHJpbmcgLT4gcHJvcC4KOm5hbWUgImRlZmF1bHQtdHlwZWNoZWNraW5nLXdhcm5pbmciCndhcm5pbmcgTXNnIDotIHByaW50IE1zZy4KCmFzc2VydCBQIF8gOi0gUCwgIS4KYXNzZXJ0IF8gKHR5cGUtZXJyIFQgVHkgRVR5KSA6LSAhLAogIGNoZWNraW5nIExPQywgdGVybV90b19zdHJpbmcgTE9DIFNMT0MsCiAgTVNHIGlzIFNMT0MgXiAiIEVycm9yOiAiIF4ge3BwIFR9IF4gIiBoYXMgdHlwZSAiIF4ge3BwdCBUeX0gXgogICAgICAgICAiIGJ1dCBpcyB1c2VkIHdpdGggdHlwZSAiIF4ge3BwdCBFVHl9LAogIGVycm9yIFtNU0ddLgphc3NlcnQgXyAod3JvbmctYXJpdHkgVCBUeSBBKSA6LSAhLAogIGNoZWNraW5nIExPQywgdGVybV90b19zdHJpbmcgTE9DIFNMT0MsCiAgTVNHIGlzIFNMT0MgXiAiIEVycm9yOiAiIF4ge3BwIFR9IF4gIiBoYXMgdHlwZSAiIF4ge3BwdCBUeX0gXgogICAgICAgICAgIiBidXQgaXMgYXBwbGllZCB0byAiIF4ge3BwLWxpc3QgQX0sCiAgZXJyb3IgW01TR10uCmFzc2VydCBfICh1bmtub3duIFQpIDotICEsCiAgY2hlY2tpbmcgTE9DLCB0ZXJtX3RvX3N0cmluZyBMT0MgU0xPQywKICBNU0cgaXMgU0xPQyBeICIgV2FybmluZzogIiBeIHtwcCBUfSBeICIgaXMgdW5kZWNsYXJlZCIsCiAgd2FybmluZyBNU0cuCgptZW0gWCBbIFggfCBfIF0gOi0gIS4KbWVtIFggWyBfIHwgWVNdIDotIG1lbSBYIFlTLgoKc3Rhc2gtbmV3IEUgUyA6LSBvcGVuX3NhZmUgRSBMLCAoIG1lbSBTIEwgOyBzdGFzaF9pbl9zYWZlIEUgUyApLCAhLgoKcmVwb3J0LWFsbC1mYWlsdXJlcy1pZi1uby1zdWNjZXNzIFAgOi0KICBuZXdfc2FmZSBFLAogICgoKHBpIE1MXCBlcnJvciBNTCA6LSAhLCBpdGVyIChzdGFzaC1uZXcgRSkgTUwsIGZhaWwpID0+IFApCiAgIDsKICAgKGVycm9yIHtvcGVuX3NhZmUgRX0pKS4KcmVwb3J0LWFsbC1mYWlsdXJlcy1hbmQtZmFpbC1pZi1uby1zdWNjZXNzIFAgOi0KICBuZXdfc2FmZSBFLAogICgoKHBpIE1MXCBlcnJvciBNTCA6LSAhLCBpdGVyIChzdGFzaC1uZXcgRSkgTUwsIGZhaWwpID0+IFApCiAgIDsKICAgKGVycm9yIHtvcGVuX3NhZmUgRX0sIGZhaWwpKS4KCm1vZGUgKHBwIGkgbykuCnR5cGUgcHAgdGVybSAtPiBzdHJpbmcgLT4gcHJvcC4KcHAgKGFwcCBMKSBUMSA6LSAhLCBwcC1saXN0IEwgVCwgVDEgaXMgIigiIF4gVCBeICIpIi4KcHAgKGxhbSBGKSBUIDotICEsIHBpIHhcIHRlcm1fdG9fc3RyaW5nIHggWFMsIChwcCB4IFhTIDotICEpID0+IHBwIChGIHgpIFQuCnBwIChjb25zdCAiZGlzY2FyZCIpICJfIiA6LSAhLgpwcCAoY29uc3QgUykgUyA6LSAhLgpwcCAoY2RhdGEgWCkgUyA6LSAhLCB0ZXJtX3RvX3N0cmluZyBYIFMuCnBwIFggWFMgOi0gdGVybV90b19zdHJpbmcgWCBYUy4KCm1vZGUgKHBwLWxpc3QgaSBvKS4KcHAtbGlzdCBbWF0gWSA6LSAhLCBwcCBYIFkuCnBwLWxpc3QgW1h8WFNdIFkgOi0gcHAtbGlzdCBYUyBYU1MsIHBwIFggWFQsIFkgaXMgWFQgXiAiICIgXiBYU1MuCnBwLWxpc3QgW10gIiIuCgptb2RlIChwcHQgaSBvKS4KcHB0IChjdHlwZSBYKSBYIDotICEuCnBwdCAodGNvbnN0IFgpIFggOi0gIS4KcHB0ICh0YXBwIEwpIFggOi0gISwgcHB0LWxpc3QgTCBULCBYIGlzICIoIiBeIFQgXiAiKSIuCnBwdCAoYXJyb3cgQSBCKSBTIDotICEsIHBwdCBBIEFTLCBwcHQgQiBCUywgUyBpcyAiKCIgXiBBUyBeICIgLT4gIiBeIEJTIF4gIikiLgpwcHQgWCBZIDotIHRlcm1fdG9fc3RyaW5nIFggWS4KCm1vZGUgKHBwdC1saXN0IGkgbykuCnBwdC1saXN0IFtYXSBZIDotICEsIHBwdCBYIFkuCnBwdC1saXN0IFtYfFhTXSBZIDotIHBwdC1saXN0IFhTIFhTUywgcHB0IFggWFQsIFkgaXMgWFQgXiAiICIgXiBYU1MuCnBwdC1saXN0IFtdICIiLgoKJSAtLS0tLS0tLS0gdHlwaW5nICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgptb2RlICh1bmlmIGkgaSkuCgp1bmlmICh0Y29uc3QgImFueSIpIF8gOi0gIS4KdW5pZiBfICh0Y29uc3QgImFueSIpIDotICEuCnVuaWYgKHRhcHAgW10pICh0YXBwIFtdKS4KdW5pZiAodGFwcCBbWHxMMV0pICh0YXBwIFtZfEwyXSkgOi0gdW5pZiBYIFksIHVuaWYgKHRhcHAgTDEpICh0YXBwIEwyKS4KdW5pZiAodGNvbnN0IFgpICh0Y29uc3QgWCkuCnVuaWYgKGN0eXBlIFgpIChjdHlwZSBYKS4KdW5pZiBwcm9wIHByb3AuCnVuaWYgKGFycm93IEExIEIxKSAoYXJyb3cgQTIgQjIpIDotIHVuaWYgQTEgQTIsIHVuaWYgQjEgQjIuCnVuaWYgKHV2YXIgYXMgWCkgWSA6LSBYID0gWS4KdW5pZiBZICh1dmFyIGFzIFgpIDotIFggPSBZLgoKbW9kZSAob2YgaSBvKS4KCm9mIChjZGF0YSBDRGF0YSkgVHkgOi0KICBpc19jZGF0YSBDRGF0YSBDVHksICEsIGFzc2VydCAodW5pZiBUeSBDVHkpICh0eXBlLWVyciAoY2RhdGEgQ0RhdGEpIENUeSBUeSkuCgpvZiAoYXBwIFtIRHxBUkdTXSkgVFkgOi0gISwgCiAgcmVwb3J0LWFsbC1mYWlsdXJlcy1pZi1uby1zdWNjZXNzICUgSEQgbWF5IGhhdmUgbXVsdGlwbGUgdHlwZXMKICAgKG9mIEhEIEhEVFksIG9mLWFwcCBIRFRZIEFSR1MgVFkgSEQgKERvbmUgLSBEb25lKSkuCm9mIChsYW0gRikgKGFycm93IFQgQikgOi0gISwgcGkgeFwKICAob2YgeCBUIDotICEpID0+IG9mIChGIHgpIEIuCgpvZiAoY29uc3QgInBpIikgKGFycm93IChhcnJvdyBBXyBwcm9wKSBwcm9wKSA6LSAhLgpvZiAoY29uc3QgInNpZ21hIikgKGFycm93IChhcnJvdyBBXyBwcm9wKSBwcm9wKSA6LSAhLgpvZiAoY29uc3QgImRpc2NhcmQiKSBBXyA6LSAhLgoKb2YgSWQgXyA6LSBhc3NlcnQgKGtub3duIElkKSAodW5rbm93biBJZCksIGZhaWwuCgptb2RlIChvZi1hcHAgaSBpIG8gbyBvKS4KCjppZiAiREVCVUc6Q0hFQ0tFUiIKb2YtYXBwIFR5IEFyZ3MgVGd0IEhkIF8gOi0KICBwcmludCB7Y291bnRlciAicnVuIn0gIm9mLWFwcCIge3BwIEhkfSAiOiIge3BwIFR5fSAiQCIge3BwLWxpc3QgQXJnc30gIj0iIHtwcCBUZ3R9LCBmYWlsLgoKb2YtYXBwICh0YXBwIFt0Y29uc3QgInZhcmlhZGljIiwgVCwgX10gYXMgVikgW1h8WFNdIFRHVCBIRCAoQiAtIEJUKSA6LSAhLAogIG9mIFggVFgsIGFzc2VydCAodW5pZiBUIFRYKSAodHlwZS1lcnIgWCBUWCBUKSwgQlQgPSBYIDo6IFRMLCBvZi1hcHAgViBYUyBUR1QgSEQgKEIgLSBUTCkuCm9mLWFwcCAodGFwcCBbdGNvbnN0ICJ2YXJpYWRpYyIsIF8sIFRTXSkgW10gVEdUIEhEIChEIC0gW10pIDotICEsCiAgYXNzZXJ0ICh1bmlmIFRHVCBUUykgKHR5cGUtZXJyIChhcHAgW0hEfERdKSBUUyBUR1QpLgpvZi1hcHAgKGFycm93IFQgVFMpIFtYfFhTXSBUR1QgSEQgKEIgLSBCVCkgOi0gISwKICBvZiBYIFRYLCBhc3NlcnQgKHVuaWYgVCBUWCkgKHR5cGUtZXJyIFggVFggVCksIEJUID0gWCA6OiBUTCwgb2YtYXBwIFRTIFhTIFRHVCBIRCAoQiAtIFRMKS4Kb2YtYXBwICh1dmFyIGFzIEFSUikgIFtYfFhTXSBUR1QgSEQgKEIgLSBCVCkgOi0gISwKICBvZiBYIFQsIEFSUiA9IGFycm93IFQgVFMsIEJUID0gWCA6OiBUTCwgb2YtYXBwIFRTIFhTIFRHVCBIRCAoQiAtIFRMKS4Kb2YtYXBwIFR5IFtdIFRHVCBIRCAoRCAtIFtdKSA6LSAhLAogIGFzc2VydCAodW5pZiBUR1QgVHkpICh0eXBlLWVyciAoYXBwIFtIRHxEXSkgVHkgVEdUKS4Kb2YtYXBwICh1dmFyIGFzIFR5KSAgW10gVEdUIEhEIChEIC0gW10pIDotICEsCiAgYXNzZXJ0ICh1bmlmIFRHVCBUeSkgKHR5cGUtZXJyIChhcHAgW0hEfERdKSBUeSBUR1QpLgoKb2YtYXBwIFR5IEFyZ3MgXyBIRCAoRCAtIFtdKSA6LSAhLAogIGFzc2VydCBmYWxzZSAod3JvbmctYXJpdHkgKGFwcCBbSER8RF0pIFR5IEFyZ3MpLgoKb2YtY2xhdXNlIFtOfE5TXSAoYXJnIEMpIDotICEsIHBpIHhcIAogKHBwIHggTiA6LSAhKSA9PiAocGkgVGZcIG9mIHggVGYgOi0gISwgYXNzZXJ0ICh1bmlmIFQgVGYpICh0eXBlLWVyciB4IFQgVGYpKSA9Pgogb2YtY2xhdXNlIE5TIChDIHgpLgpvZi1jbGF1c2UgW10gKGFyZyBDKSA6LSAhLCBwaSB4XCAKIChwaSBUZlwgb2YgeCBUZiA6LSAhLCBhc3NlcnQgKHVuaWYgVCBUZikgKHR5cGUtZXJyIHggVCBUZikpID0+CiBvZi1jbGF1c2UgW10gKEMgeCkuCm9mLWNsYXVzZSBfIEMgOi0gb2YgQyBUQywgYXNzZXJ0ICh1bmlmIFRDIHByb3ApICh0eXBlLWVyciBDIFRDIHByb3ApLgoKdHlwZSBjaGVja2luZyAoY3R5cGUgImxvYyIpIC0+IHByb3AuCgo6aWYgIkRFQlVHOkNIRUNLRVIiCmxvZy10Yy1jbGF1c2UgTG9jIFF1ZXJ5IDotICEsIHByaW50IHtjb3VudGVyICJydW4ifSAidHlwZWNoZWNrIiBMb2MgUXVlcnkuCmxvZy10Yy1jbGF1c2UgXyBfLgoKdHlwZWNoZWNrIFtdIChjbGF1c2UgTG9jIE5hbWVzIFF1ZXJ5KSA6LQogIGxvZy10Yy1jbGF1c2UgTG9jIFF1ZXJ5LAogIGNoZWNraW5nIExvYyA9PgogICAgcmVwb3J0LWFsbC1mYWlsdXJlcy1hbmQtZmFpbC1pZi1uby1zdWNjZXNzIChvZi1jbGF1c2UgTmFtZXMgUXVlcnkpLgp0eXBlY2hlY2sgWyAoY2xhdXNlIExvYyBOYW1lcyBDbGF1c2UpIHxSZXN0XSBRIDotCiAgbG9nLXRjLWNsYXVzZSBMb2MgQ2xhdXNlLAogIGNoZWNraW5nIExvYyA9PgogICAgcmVwb3J0LWFsbC1mYWlsdXJlcy1hbmQtZmFpbC1pZi1uby1zdWNjZXNzIChvZi1jbGF1c2UgTmFtZXMgQ2xhdXNlKSwgISwKICB0eXBlY2hlY2sgUmVzdCBRLgoKbW9kZSAocmVmcmVzaCBpIG8pLgpyZWZyZXNoIChmb3JhbGwgRikgVCA6LSAhLCByZWZyZXNoIChGIEZSRVNIXykgVC4KcmVmcmVzaCAodGNvbnN0ICJhbnkiKSBGUkVTSF8gOi0gIS4KcmVmcmVzaCBYIFguCgpraW5kIGVudHJ5IHR5cGUuCnR5cGUgYDogdGVybSAtPiB0eXAgLT4gZW50cnkuCgptZW0tYXNzb2MgWCBbWCBgOiBfIHwgX10gOi0gIS4KbWVtLWFzc29jIFggWyBfIHwgWFNdIDotIG1lbS1hc3NvYyBYIFhTLgoKc2FmZS1kZXN0LWFwcCAoYXBwIFtYIHwgQV0pIFggQSA6LSAhLgpzYWZlLWRlc3QtYXBwIFggWCBbXS4KCm1hY3JvIEB2ZGFzaCA6LSAiOi0iLgoKY29sbGVjdC1wcmVkaWNhdGVzLWNsYXVzZSAoYXJnIEYpIEFjYyBSZXMgOi0gISwKICBwaSB4XCBjb2xsZWN0LXByZWRpY2F0ZXMtY2xhdXNlIChGIHgpIEFjYyBSZXMuCmNvbGxlY3QtcHJlZGljYXRlcy1jbGF1c2UgKGFwcCBbY29uc3QgQHZkYXNoLCBIRCB8IF9dKSBBY2MgUmVzIDotICEsCiAgc2FmZS1kZXN0LWFwcCBIRCBDIF8sIGlmIChtZW0tYXNzb2MgQyBBY2MpIChSZXMgPSBBY2MpIChSZXMgPSBbQyBgOiBfIHwgQWNjXSkuCmNvbGxlY3QtcHJlZGljYXRlcy1jbGF1c2UgSEQgQWNjIFJlcyA6LQogIHNhZmUtZGVzdC1hcHAgSEQgQyBfLCBpZiAobWVtLWFzc29jIEMgQWNjKSAoUmVzID0gQWNjKSAoUmVzID0gW0MgYDogXyB8IEFjY10pLgoKY29sbGVjdC1wcmVkaWNhdGVzLXByb2dyYW0gWyAoY2xhdXNlIF8gXyBDKSB8IFAgXSBBY2MgUmVzIDotCiAgY29sbGVjdC1wcmVkaWNhdGVzLWNsYXVzZSBDIEFjYyBBY2MxLAogIGNvbGxlY3QtcHJlZGljYXRlcy1wcm9ncmFtIFAgQWNjMSBSZXMuCmNvbGxlY3QtcHJlZGljYXRlcy1wcm9ncmFtIFtdIFggWC4KCm1vZGUgKHVuZGVyLWVudiBpIGkpLgoKdHlwZSBrbm93biB0ZXJtIC0+IHByb3AuCgp1bmRlci1lbnYgW10gUCA6LSBQLgp1bmRlci1lbnYgWyBYIGA6IFBUIHwgWFMgXSBQIDotCiAgJXByaW50ICJBc3N1bWUiIFggUFQsCiAgKHBpIFR5XCBvZiBYIFR5IDotIHJlZnJlc2ggUFQgVHkpID0+IGtub3duIFggPT4gdW5kZXItZW52IFhTIFAuCgpwcmVkIHJldiBpOmxpc3QgQSwgbzpsaXN0IEEuCnJldiBMIFJMICA6LSByZXYtYXV4IEwgW10gIFJMLgpwcmVkIHJldi1hdXggaTpsaXN0IEEsIGk6bGlzdCBBLCBvOmxpc3QgQS4KcmV2LWF1eCBbWHxYU10gQUNDIFIgOi0gcmV2LWF1eCBYUyBbWHxBQ0NdIFIuCnJldi1hdXggW10gTCBMLgoKdHlwZWNoZWNrLXByb2dyYW0gUCBRIERlY2xhcmVkVHlwZXMgOi0KICBjb2xsZWN0LXByZWRpY2F0ZXMtcHJvZ3JhbSBQIERlY2xhcmVkVHlwZXMgQWxsVHlwZXMsICEsCiAgdW5kZXItZW52IHtyZXYgQWxsVHlwZXN9ICh0eXBlY2hlY2sgUCBRKS4KCiUgLS0tLS0tLS0tLSB3YXJuaW5ncyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCnR5cGUgYC0+IHRlcm0gLT4gaW50IC0+IGVudHJ5Lgp0eXBlIHZhcmlhYmxlIHRlcm0gLT4gcHJvcC4KCm1vZGUgKHJlcG9ydC1saW5lYXIgaSkuCnJlcG9ydC1saW5lYXIgW10uCnJlcG9ydC1saW5lYXIgW1YgYC0+IDEgKyB1dmFyIHxOU10gOi0gISwKICBwcCBWIFZOLAogIGlmIChub3QocmV4X21hdGNoICJfIiBWTiksIG5vdChyZXhfbWF0Y2ggIi4qXyIgVk4pKQogICAgKGNoZWNraW5nIExPQywgdGVybV90b19zdHJpbmcgTE9DIFNMT0MsCiAgICAgTVNHIGlzIFNMT0MgXiIgV2FybmluZzogIl4gVk4gXiIgaXMgbGluZWFyOiBuYW1lIGl0IF8iIF4gVk4gXiAiIChkaXNjYXJkKSBvciAiIF4gVk4gXiAiXyAoZnJlc2ggdmFyaWFibGUpIiwKICAgICB3YXJuaW5nIE1TRykKICAgIHRydWUsCiAgcmVwb3J0LWxpbmVhciBOUy4KcmVwb3J0LWxpbmVhciBbViBgLT4gdXZhciB8TlNdIDotCiAgY2hlY2tpbmcgTE9DLCB0ZXJtX3RvX3N0cmluZyBMT0MgU0xPQywKICBNU0cgaXMgU0xPQyBeIiBXYXJuaW5nOiAiXiB7cHAgVn0gXiIgaXMgdW51c2VkIiwKICB3YXJuaW5nIE1TRywKICByZXBvcnQtbGluZWFyIE5TLgpyZXBvcnQtbGluZWFyIFtfIGAtPiBfIHwgTlNdIDotIHJlcG9ydC1saW5lYXIgTlMuCgp0eXBlIGNvdW50IEEgLT4gbGlzdCBCIC0+IHByb3AuCmNvdW50IChsYW0gRikgRSA6LSBwaSB4XCBjb3VudCAoRiB4KSBFLgpjb3VudCAoYXBwIFtYfFhTXSkgRSA6LSAhLCBjb3VudCBYIEUsIGNvdW50IChhcHAgWFMpIEUuCmNvdW50IChhcHAgW10pIF8gOi0gIS4KY291bnQgWCBFIDotIHZhcmlhYmxlIFgsICEsIGluY3IgWCBFLgpjb3VudCBBIF8uCgptb2RlIChpbmNyIGkgaSkuCmluY3IgWCBbWCBgLT4gSyB8IF9dIDotIGFkZDEgSy4KaW5jciBYIFtfIHwgWFNdIDotIGluY3IgWCBYUy4KCm1vZGUgKGFkZDEgaSkuCmFkZDEgKHV2YXIgYXMgSykgOi0gSyA9IDEgKyBGUkVTSF8uCmFkZDEgKDEgKyBLKSA6LSBhZGQxIEsuCgpjaGVjay1ub24tbGluZWFyIFtOfE5TXSAoYXJnIEMpIEwgOi0gcGkgeFwKIChwcCB4IE4gOi0gISkgPT4gKHZhcmlhYmxlIHgpID0+IGNoZWNrLW5vbi1saW5lYXIgTlMgKEMgeCkgW3ggYC0+IEZSRVNIXyB8IExdLgpjaGVjay1ub24tbGluZWFyIFtdIChhcmcgQykgTCA6LSBwaSB4XAogKHZhcmlhYmxlIHgpID0+IGNoZWNrLW5vbi1saW5lYXIgTlMgKEMgeCkgW3ggYC0+IEZSRVNIXyB8IExdLgpjaGVjay1ub24tbGluZWFyIF8gQyBMIDotCiAgY291bnQgQyBMLCByZXBvcnQtbGluZWFyIEwuCgp3YXJuLWxpbmVhciBbXS4Kd2Fybi1saW5lYXIgWyAoY2xhdXNlIExvYyBOYW1lcyBDbGF1c2UpIHxDU10gOi0KICBjaGVja2luZyBMb2MgPT4gIGNoZWNrLW5vbi1saW5lYXIgTmFtZXMgQ2xhdXNlIFtdLAogIHdhcm4tbGluZWFyIENTLgoKJSAtLS0tLS0tLS0tIHRlc3QgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKdHlwZSBmb28gaW50IC0+IHByb3AuCnR5cGUgZm9vIHN0cmluZyAtPiBwcm9wLgoKbWFpbiA6LSB0ZXN0MSwgdGVzdDIsIHRlc3QzLCB0ZXN0NCwgdGVzdDUsIHRlc3Q2LCB0ZXN0NywKICAgICAgICB3YXJuMS4KdGVzdDEgOi0gYXBwIGxhbS4KdGVzdDIgOi0gbGFtIGFwcC4KdGVzdDMgOi0gYXBwICJvb3BzIi4KdGVzdDQgOi0gIGFwcCBbXSAyLgp0ZXN0NSA6LSBwcmludCB4IDIgIjN4Ii4KdGVzdDYgOi0gZm9vICJ4IiwgZm9vIDEsIGZvbyBhcHAuCnRlc3Q3IDotIGZvbyAoZm9vIGFwcCkuCndhcm4xIDotIExJTkVBUi4KCiUgLS0tLS0tLSBlbnRyeSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCmNoZWNrIFAgUSBEZWNsYXJlZFR5cGVzIDotCiAgdHlwZWNoZWNrLXByb2dyYW0gUCBRIERlY2xhcmVkVHlwZXMsICEsIHdhcm4tbGluZWFyIFAuCgolIHZpbTogc2V0IGZ0PWxwcm9sb2c6Cg==" }; { name = "elpi_quoted_syntax.elpi"; text = "LyogZWxwaTogZW1iZWRkZWQgbGFtYmRhIHByb2xvZyBpbnRlcnByZXRlciAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqLwovKiBsaWNlbnNlOiBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgVmVyc2lvbiAyLjEgb3IgbGF0ZXIgICAgICAgICAgICovCi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi8KCiUgSE9BUyBmb3IgZWxwaSBwcm9ncmFtcwoKa2luZCB0ZXJtIHR5cGUuCgp0eXBlIGFwcCBsaXN0IHRlcm0gLT4gdGVybS4KdHlwZSBsYW0gKHRlcm0gLT4gdGVybSkgLT4gdGVybS4KdHlwZSBjb25zdCBzdHJpbmcgLT4gdGVybS4KCnR5cGUgY2RhdGEgY3R5cGUgImNkYXRhIiAtPiB0ZXJtLiAlIGludCwgc3RyaW5nLCBmbG9hdC4uIHNlZSBhbHNvICRpc19jZGF0YQoKdHlwZSBhcmcgKHRlcm0gLT4gdGVybSkgLT4gdGVybS4gICUgb25seSB0byBiaW5kIHRoZSBhcmdzIG9mIGEgY2xhdXNlCgpraW5kIGNsYXVzZSB0eXBlLgp0eXBlIGNsYXVzZSAoY3R5cGUgImxvYyIpIC0+IGxpc3Qgc3RyaW5nIC0+IHRlcm0gLT4gY2xhdXNlLgoKJSBhIHByb2dyYW0gaXMgdGhlbiBhIGxpc3Qgb2YgY2xhdXNlIHdoaWxlCiUgdGhlIHF1ZXJ5IGlzIGp1c3Qgb25lIGl0ZW0gb2YgdGhlIHNhbWUga2luZC4KCiUgc2VlIGVscGktY2hlY2tlci5lbHBpIGZvciBhbiBleGFtcGxlCgolIHZpbTogc2V0IGZ0PWxwcm9sb2c6Cgo=" }]
 let load () = List.iter (fun f -> Sys_js.create_file f.name (B64.decode f.text)) files
