% elpi: embedded lambda prolog interpreter
% license: GNU Lesser General Public License Version 2.1 or later

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Lambda Prolog standard predicates
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

pred true.
true.

pred fail.
pred false.

pred (=) o:A, o:A.
X = X.

(A ; _) :- A.
(_ ; B) :- B.

external pred !.

pred not i:prop.
not X :- X, !, fail.
not _.

external pred halt.
stop :- halt.

kind ctype type.
type ctype string -> ctype.

macro @file :- ctype "file".

external pred open_in     i:string, o:@file.
external pred open_out    i:string, o:@file.
external pred close_in    i:@file.
external pred close_out   i:@file.
external pred open_append i:string, o:@file.
external pred open_string i:string, o:@file.
external pred input_line i:@file, o:string.
external pred output     i:@file, o:string.
external pred input      i:int, i:int, o:string.
external pred flush i:@file.
external pred eof i:@file.
external pred lookahead i:@file, o:string.

external pred getenv i:string, o:string.
external pred system i:string, o:int.
external pred gettimeofday o:float.

external pred term_to_string i:A, o:string.
external pred string_to_term i:string, o:A.
external pred readterm i:@file, o:A.
printterm S T :- term_to_string T T1, output S T1.
read S :- flush std_out, input_line std_in X, string_to_term X S.

external pred lt_ i:A, i:A.
external pred gt_ i:A, i:A.
external pred le_ i:A, i:A.
external pred ge_ i:A, i:A.

X  < Y  :- lt_ X Y.
X i< Y  :- lt_ X Y.
X r< Y  :- lt_ X Y.
X s< Y  :- lt_ X Y.

X  > Y  :- gt_ X Y.
X i> Y  :- gt_ X Y.
X r> Y  :- gt_ X Y.
X s> Y  :- gt_ X Y.

X  =< Y :- le_ X Y.
X i=< Y :- le_ X Y.
X r=< Y :- le_ X Y.
X s=< Y :- le_ X Y.

X  >= Y :- ge_ X Y.
X i>= Y :- ge_ X Y.
X r>= Y :- ge_ X Y.
X s>= Y :- ge_ X Y.

external pred is_ i:A, i:A.
pred (is) o:A, i:A.
X is Y :- is_ X Y.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Elpi predicates
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

external pred declare_constraint i:A, i:B.
external pred print_constraints.

external pred rex_match i:string, i:string.
external pred rex_replace i:string, i:string, o:string.

external type print variadic any prop.
external type dprint variadic any prop.

% tracing facility: read the value of a tracing point counter like "run"
external pred counter i:string, o:int.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Elpi NON LOGICAL predicates
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

external type is_cdata A -> ctype -> prop. 
primitive? X S :- is_cdata X (ctype S).

external pred var i:A.
external pred same_var i:A, i:A.

% succeeds iff the term is a pi-bound variable
external pred is_name i:A.
% generates a list of names, x0....xn where n is the current depth
external pred names o:list A.
% [occurs Name Term] succeeds iff the Name occurs in Term
external pred occurs i:A, i:A.

% generates a variable at level 0
external pred closed_term o:A.

% generates a fresh integer.
external pred new_int o:int.

% Carrier (closed) data across backtracking (e.g. type errors)
external pred new_safe o:ctype "safe".
external pred open_safe i:ctype "safe", o:list A.
external pred stash i:ctype "safe", i:A.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Type annotations for constants
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

type (::) X -> list X -> list X.
type ([]) list X.
type (:-) prop -> prop -> prop.
type (:-) prop -> list prop -> prop.
type (,) variadic prop prop.
type (??) A.
type (as) A -> A -> A.
type (-) A -> A -> A.
type (=>) prop -> prop -> prop.
type (=>) list prop -> prop -> prop.
type (^) string -> string -> string.
type (+) int -> int -> int.
type (*) int -> int -> int.
type std_in @file.
type std_out @file.
type discard A.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Elpi's syntax
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% See elpi_quoted_syntax.elpi

% quote_syntax "filename.elpi" "query A B" Program Query
external pred quote_syntax i:string, i:string, o:list A, o:A.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% OUT OF PLACE (Matita specific)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

external pred lt i:A, i:A.
external pred level i:A, o:int.
external type deref variadic any prop.

% vim: set ft=lprolog:

