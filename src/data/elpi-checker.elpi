/* elpi: embedded lambda prolog interpreter                                  */
/* license: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */

% Simple type checker for lambda-Prolog programs
accumulate elpi_quoted_syntax.

% --------- HOAS or programs  ------------------------------------------------

kind typ type. %%%%% types %%%%%%

type arrow typ -> typ -> typ.
type tconst string -> typ.
type tapp list typ -> typ.
type prop typ.
type forall (typ -> typ) -> typ. % polymorphic type declarations
type ctype string -> typ.

% --------- utils  ---------------------------------------------------------

if B T _ :- B, !, T.
if _ _ E :- E.

iter _ [].
iter F [X | XS] :- F X, iter F XS.

% --------- error reporting  ------------------------------------------------
kind err type.
type type-err term -> typ -> typ -> err.
type wrong-arity term -> typ -> list term -> err.
type unknown term -> err.
type assert prop -> err -> prop.

type error list string -> prop.
:name "default-typechecking-error"
error Msg :- iter (x\ print x) Msg.

type warning string -> prop.
:name "default-typechecking-warning"
warning Msg :- print Msg.

assert P _ :- P, !.
assert _ (type-err T Ty ETy) :- !,
  checking LOC, term_to_string LOC SLOC,
  MSG is SLOC ^ " Error: " ^ {pp T} ^ " has type " ^ {ppt Ty} ^
         " but is used with type " ^ {ppt ETy},
  error [MSG].
assert _ (wrong-arity T Ty A) :- !,
  checking LOC, term_to_string LOC SLOC,
  MSG is SLOC ^ " Error: " ^ {pp T} ^ " has type " ^ {ppt Ty} ^
          " but is applied to " ^ {pp-list A},
  error [MSG].
assert _ (unknown T) :- !,
  checking LOC, term_to_string LOC SLOC,
  MSG is SLOC ^ " Warning: " ^ {pp T} ^ " is undeclared",
  warning MSG.

mem X [ X | _ ] :- !.
mem X [ _ | YS] :- mem X YS.

stash-new E S :- open_safe E L, ( mem S L ; stash_in_safe E S ), !.

report-all-failures-if-no-success P :-
  new_safe E,
  (((pi ML\ error ML :- !, iter (stash-new E) ML, fail) => P)
   ;
   (error {open_safe E})).
report-all-failures-and-fail-if-no-success P :-
  new_safe E,
  (((pi ML\ error ML :- !, iter (stash-new E) ML, fail) => P)
   ;
   (error {open_safe E}, fail)).

mode (pp i o).
type pp term -> string -> prop.
pp (app L) T1 :- !, pp-list L T, T1 is "(" ^ T ^ ")".
pp (lam F) T :- !, pi x\ term_to_string x XS, (pp x XS :- !) => pp (F x) T.
pp (const "discard") "_" :- !.
pp (const S) S :- !.
pp (cdata X) S :- !, term_to_string X S.
pp X XS :- term_to_string X XS.

mode (pp-list i o).
pp-list [X] Y :- !, pp X Y.
pp-list [X|XS] Y :- pp-list XS XSS, pp X XT, Y is XT ^ " " ^ XSS.
pp-list [] "".

mode (ppt i o).
ppt (ctype X) X :- !.
ppt (tconst X) X :- !.
ppt (tapp L) X :- !, ppt-list L T, X is "(" ^ T ^ ")".
ppt (arrow A B) S :- !, ppt A AS, ppt B BS, S is "(" ^ AS ^ " -> " ^ BS ^ ")".
ppt X Y :- term_to_string X Y.

mode (ppt-list i o).
ppt-list [X] Y :- !, ppt X Y.
ppt-list [X|XS] Y :- ppt-list XS XSS, ppt X XT, Y is XT ^ " " ^ XSS.
ppt-list [] "".

% --------- typing  -------------------------------------------------------

mode (unif i i).

unif (tconst "any") _ :- !.
unif _ (tconst "any") :- !.
unif (tapp []) (tapp []).
unif (tapp [X|L1]) (tapp [Y|L2]) :- unif X Y, unif (tapp L1) (tapp L2).
unif (tconst X) (tconst X).
unif (ctype X) (ctype X).
unif prop prop.
unif (arrow A1 B1) (arrow A2 B2) :- unif A1 A2, unif B1 B2.
unif (uvar as X) Y :- X = Y.
unif Y (uvar as X) :- X = Y.

mode (of i o).

of (cdata CData) Ty :-
  is_cdata CData CTy, !, assert (unif Ty CTy) (type-err (cdata CData) CTy Ty).

of (app [HD|ARGS]) TY :- !, 
  report-all-failures-if-no-success % HD may have multiple types
   (of HD HDTY, of-app HDTY ARGS TY HD (Done - Done)).
of (lam F) (arrow T B) :- !, pi x\
  (of x T :- !) => of (F x) B.

of (const "pi") (arrow (arrow A_ prop) prop) :- !.
of (const "sigma") (arrow (arrow A_ prop) prop) :- !.
of (const "discard") A_ :- !.

of Id _ :- assert (known Id) (unknown Id), fail.

mode (of-app i i o o o).

:if "DEBUG:CHECKER"
of-app Ty Args Tgt Hd _ :-
  print {counter "run"} "of-app" {pp Hd} ":" {pp Ty} "@" {pp-list Args} "=" {pp Tgt}, fail.

of-app (tapp [tconst "variadic", T, _] as V) [X|XS] TGT HD (B - BT) :- !,
  of X TX, assert (unif T TX) (type-err X TX T), BT = X :: TL, of-app V XS TGT HD (B - TL).
of-app (tapp [tconst "variadic", _, TS]) [] TGT HD (D - []) :- !,
  assert (unif TGT TS) (type-err (app [HD|D]) TS TGT).
of-app (arrow T TS) [X|XS] TGT HD (B - BT) :- !,
  of X TX, assert (unif T TX) (type-err X TX T), BT = X :: TL, of-app TS XS TGT HD (B - TL).
of-app (uvar as ARR)  [X|XS] TGT HD (B - BT) :- !,
  of X T, ARR = arrow T TS, BT = X :: TL, of-app TS XS TGT HD (B - TL).
of-app Ty [] TGT HD (D - []) :- !,
  assert (unif TGT Ty) (type-err (app [HD|D]) Ty TGT).
of-app (uvar as Ty)  [] TGT HD (D - []) :- !,
  assert (unif TGT Ty) (type-err (app [HD|D]) Ty TGT).

of-app Ty Args _ HD (D - []) :- !,
  assert false (wrong-arity (app [HD|D]) Ty Args).

of-clause [N|NS] (arg C) :- !, pi x\ 
 (pp x N :- !) => (pi Tf\ of x Tf :- !, assert (unif T Tf) (type-err x T Tf)) =>
 of-clause NS (C x).
of-clause [] (arg C) :- !, pi x\ 
 (pi Tf\ of x Tf :- !, assert (unif T Tf) (type-err x T Tf)) =>
 of-clause [] (C x).
of-clause _ C :- of C TC, assert (unif TC prop) (type-err C TC prop).

type checking (ctype "loc") -> prop.

:if "DEBUG:CHECKER"
log-tc-clause Loc Query :- !, print {counter "run"} "typecheck" Loc Query.
log-tc-clause _ _.

typecheck [] (clause Loc Names Query) :-
  log-tc-clause Loc Query,
  checking Loc =>
    report-all-failures-and-fail-if-no-success (of-clause Names Query).
typecheck [ (clause Loc Names Clause) |Rest] Q :-
  log-tc-clause Loc Clause,
  checking Loc =>
    report-all-failures-and-fail-if-no-success (of-clause Names Clause), !,
  typecheck Rest Q.

mode (refresh i o).
refresh (forall F) T :- !, refresh (F FRESH_) T.
refresh (tconst "any") FRESH_ :- !.
refresh X X.

kind entry type.
type `: term -> typ -> entry.

mem-assoc X [X `: _ | _] :- !.
mem-assoc X [ _ | XS] :- mem-assoc X XS.

safe-dest-app (app [X | A]) X A :- !.
safe-dest-app X X [].

macro @vdash :- ":-".

collect-predicates-clause (arg F) Acc Res :- !,
  pi x\ collect-predicates-clause (F x) Acc Res.
collect-predicates-clause (app [const @vdash, HD | _]) Acc Res :- !,
  safe-dest-app HD C _, if (mem-assoc C Acc) (Res = Acc) (Res = [C `: _ | Acc]).
collect-predicates-clause HD Acc Res :-
  safe-dest-app HD C _, if (mem-assoc C Acc) (Res = Acc) (Res = [C `: _ | Acc]).

collect-predicates-program [ (clause _ _ C) | P ] Acc Res :-
  collect-predicates-clause C Acc Acc1,
  collect-predicates-program P Acc1 Res.
collect-predicates-program [] X X.

mode (under-env i i).

type known term -> prop.

under-env [] P :- P.
under-env [ X `: PT | XS ] P :-
  %print "Assume" X PT,
  (pi Ty\ of X Ty :- refresh PT Ty) => known X => under-env XS P.

pred rev i:list A, o:list A.
rev L RL  :- rev-aux L []  RL.
pred rev-aux i:list A, i:list A, o:list A.
rev-aux [X|XS] ACC R :- rev-aux XS [X|ACC] R.
rev-aux [] L L.

typecheck-program P Q DeclaredTypes :-
  collect-predicates-program P DeclaredTypes AllTypes, !,
  under-env {rev AllTypes} (typecheck P Q).

% ---------- warnings ------------------------------------------------------

type `-> term -> int -> entry.
type variable term -> prop.

mode (report-linear i).
report-linear [].
report-linear [V `-> 1 + uvar |NS] :- !,
  pp V VN,
  if (not(rex_match "_" VN), not(rex_match ".*_" VN))
    (checking LOC, term_to_string LOC SLOC,
     MSG is SLOC ^" Warning: "^ VN ^" is linear: name it _" ^ VN ^ " (discard) or " ^ VN ^ "_ (fresh variable)",
     warning MSG)
    true,
  report-linear NS.
report-linear [V `-> uvar |NS] :-
  checking LOC, term_to_string LOC SLOC,
  MSG is SLOC ^" Warning: "^ {pp V} ^" is unused",
  warning MSG,
  report-linear NS.
report-linear [_ `-> _ | NS] :- report-linear NS.

type count A -> list B -> prop.
count (lam F) E :- pi x\ count (F x) E.
count (app [X|XS]) E :- !, count X E, count (app XS) E.
count (app []) _ :- !.
count X E :- variable X, !, incr X E.
count A _.

mode (incr i i).
incr X [X `-> K | _] :- add1 K.
incr X [_ | XS] :- incr X XS.

mode (add1 i).
add1 (uvar as K) :- K = 1 + FRESH_.
add1 (1 + K) :- add1 K.

check-non-linear [N|NS] (arg C) L :- pi x\
 (pp x N :- !) => (variable x) => check-non-linear NS (C x) [x `-> FRESH_ | L].
check-non-linear [] (arg C) L :- pi x\
 (variable x) => check-non-linear NS (C x) [x `-> FRESH_ | L].
check-non-linear _ C L :-
  count C L, report-linear L.

warn-linear [].
warn-linear [ (clause Loc Names Clause) |CS] :-
  checking Loc =>  check-non-linear Names Clause [],
  warn-linear CS.

% ---------- test ----------------------------------------------------------

type foo int -> prop.
type foo string -> prop.

main :- test1, test2, test3, test4, test5, test6, test7,
        warn1.
test1 :- app lam.
test2 :- lam app.
test3 :- app "oops".
test4 :-  app [] 2.
test5 :- print x 2 "3x".
test6 :- foo "x", foo 1, foo app.
test7 :- foo (foo app).
warn1 :- LINEAR.

% ------- entry ---------------------------------------

check P Q DeclaredTypes :-
  typecheck-program P Q DeclaredTypes, !, warn-linear P.

% vim: set ft=lprolog:
